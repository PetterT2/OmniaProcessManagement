// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Omnia.ProcessManagement.Core.Repositories;

namespace Omnia.ProcessManagement.Core.Migrations
{
    [DbContext(typeof(OmniaPMDbContext))]
    partial class OmniaPMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Images.Image", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<byte[]>("Content")
                    .HasColumnType("varbinary(max)");

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Images");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Images.ImageReference", b =>
            {
                b.Property<Guid>("ProcessId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("FileName")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("ImageId")
                    .HasColumnType("int");

                b.HasKey("ProcessId", "FileName", "ImageId");

                b.HasIndex("ImageId");

                b.ToTable("ImageReferences");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.ProcessTemplates.ProcessTemplate", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("JsonValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.ToTable("ProcessTemplates");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.ProcessTypes.ProcessType", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("JsonValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid?>("ParentId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("RootId")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Title")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.HasKey("Id")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.HasIndex("RootId")
                    .IsUnique()
                    .HasFilter("[ParentId] IS NULL AND [DeletedAt] IS NULL");

                b.ToTable("ProcessTypes");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.ProcessTypes.ProcessTypeTermSynchronizationTracking", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("Hash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Message")
                    .HasColumnType("nvarchar(max)");

                b.Property<long>("Milliseconds")
                    .HasColumnType("bigint");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("ProcessTypeRootId")
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Status")
                    .HasColumnType("int");

                b.Property<bool>("SyncFromSharePoint")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("ProcessTypeTermSynchronizationTracking");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Processes.Process", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("CheckedOutBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("EnterpriseProperties")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("JsonValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("OPMProcessId")
                    .HasColumnType("uniqueidentifier");

                b.Property<byte>("ProcessWorkingStatus")
                    .HasColumnType("tinyint");

                b.Property<DateTimeOffset?>("PublishedAt")
                        .HasColumnType("datetimeoffset");

                b.Property<string>("PublishedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("SecurityResourceId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("TeamAppId")
                    .HasColumnType("uniqueidentifier");

                b.Property<byte>("VersionType")
                    .HasColumnType("tinyint");

                b.HasKey("Id")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.HasIndex("OPMProcessId", "VersionType")
                    .IsUnique()
                    .HasFilter("[VersionType] != 2");

                b.ToTable("Processes");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Processes.ProcessConcurrencyLock", b =>
            {
                b.Property<Guid>("OPMProcessId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("OPMProcessId");

                b.ToTable("ProcessConcurrencyLock");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Processes.ProcessData", b =>
            {
                b.Property<Guid>("ProcessStepId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("ProcessId")
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Hash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("JsonValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ReferenceProcessStepIds")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("ProcessStepId", "ProcessId")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.HasIndex("ProcessId");

                b.ToTable("ProcessData");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.ReviewReminders.ReviewReminderQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OPMProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ReviewReminderDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OPMProcessId", "Pending")
                        .IsUnique()
                        .HasFilter("[Pending] = 1");

                    b.ToTable("ReviewReminderQueues");
                });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Settings.Setting", b =>
            {
                b.Property<string>("Key")
                    .HasColumnType("nvarchar(450)");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Key")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.ToTable("Settings");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Workflows.Workflow", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<byte>("CompletedType")
                    .HasColumnType("tinyint");

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTimeOffset?>("DueDate")
                    .HasColumnType("datetimeoffset");

                b.Property<int>("Edition")
                    .HasColumnType("int");

                b.Property<string>("JsonValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<Guid>("OPMProcessId")
                    .HasColumnType("uniqueidentifier");

                b.Property<byte>("Type")
                    .HasColumnType("tinyint");

                b.HasKey("Id")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.HasIndex("OPMProcessId")
                    .IsUnique()
                    .HasFilter("[CompletedType] = 0");

                b.ToTable("Workflows");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Workflows.WorkflowTask", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("AssignedUser")
                    .HasColumnType("nvarchar(max)");

                b.Property<long>("ClusteredId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset>("CreatedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("CreatedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTimeOffset?>("DeletedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<bool>("IsCompleted")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset>("ModifiedAt")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("ModifiedBy")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("SPTaskId")
                    .HasColumnType("int");

                b.Property<byte>("TaskOutcome")
                    .HasColumnType("tinyint");

                b.Property<Guid>("TeamAppId")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("WorkflowId")
                    .HasColumnType("uniqueidentifier");

                b.HasKey("Id")
                    .HasAnnotation("SqlServer:Clustered", false);

                b.HasIndex("ClusteredId")
                    .IsUnique()
                    .HasAnnotation("SqlServer:Clustered", true);

                b.HasIndex("WorkflowId");

                b.ToTable("WorkflowTasks");
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Images.ImageReference", b =>
            {
                b.HasOne("Omnia.ProcessManagement.Core.Entities.Images.Image", "Image")
                    .WithMany("ImageReferences")
                    .HasForeignKey("ImageId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("Omnia.ProcessManagement.Core.Entities.Processes.Process", "Process")
                    .WithMany("ImageReferences")
                    .HasForeignKey("ProcessId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Processes.ProcessData", b =>
            {
                b.HasOne("Omnia.ProcessManagement.Core.Entities.Processes.Process", "Process")
                    .WithMany("ProcessData")
                    .HasForeignKey("ProcessId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Omnia.ProcessManagement.Core.Entities.Workflows.WorkflowTask", b =>
            {
                b.HasOne("Omnia.ProcessManagement.Core.Entities.Workflows.Workflow", "Workflow")
                    .WithMany("WorkflowTasks")
                    .HasForeignKey("WorkflowId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
